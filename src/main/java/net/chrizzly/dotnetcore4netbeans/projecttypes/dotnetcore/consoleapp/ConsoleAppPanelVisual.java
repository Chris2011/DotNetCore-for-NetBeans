package net.chrizzly.dotnetcore4netbeans.projecttypes.dotnetcore.consoleapp;

import java.awt.Cursor;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.prefs.PreferenceChangeEvent;
import java.util.prefs.PreferenceChangeListener;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import net.chrizzly.dotnetcore4netbeans.options.DotnetCliOptions;
import net.chrizzly.dotnetcore4netbeans.ui.options.DotnetCliOptionsPanelController;
import net.chrizzly.dotnetcore4netbeans.validator.DotnetCliOptionsValidator;
import net.chrizzly.dotnetcore4netbeans.validator.ValidationResult;
import org.netbeans.api.options.OptionsDisplayer;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;
import org.openide.util.ChangeSupport;

public final class ConsoleAppPanelVisual extends JPanel implements DocumentListener, PreferenceChangeListener {

    private final List<String> solutionOptions;

    private final ChangeSupport changeSupport = new ChangeSupport(this);
    private final AtomicInteger listenerCount = new AtomicInteger();
    private final ConsoleAppWizardPanel panel;

    public static final String PROP_SOLUTION_NAME = "solutionName";
    public static final String PROP_PROJECT_NAME = "projectName";
    public static final String PROP_SAME_DIR = "sameDir";

    public ConsoleAppPanelVisual(ConsoleAppWizardPanel panel) {
        initComponents();
        this.panel = panel;

        // Register listener on the textFields to make the automatic updates
        solutionNameField.getDocument().addDocumentListener(this);
        projectNameField.getDocument().addDocumentListener(this);
        solutionDirectoryField.getDocument().addDocumentListener(this);

        solutionOptions = new ArrayList<>();
        solutionOptions.add("Create new solution");
        solutionOptions.add("Add to solution");

        setChangeSolutionInstance(solutionOptions);
        enableSolutionField();

        sameDir.addChangeListener((e) -> {
            // HINT: Validation is going to happen in the updateTexts method.
//            panel.isValid();

            firePropertyChange(PROP_SAME_DIR, null, this.sameDir.isSelected());
        });

        changeSolutionInstance.addItemListener((e) -> {
            // HINT: Validation is going to happen in the updateTexts method.
//            panel.isValid();
            enableSolutionField();
        });
    }

    private void enableSolutionField() {
        int selectedIndex = changeSolutionInstance.getSelectedIndex();
        solutionNameField.setEnabled(selectedIndex == 0);
    }

    private void setChangeSolutionInstance(List<String> options) {
        changeSolutionInstance.removeAllItems();
        options.forEach((item) -> changeSolutionInstance.addItem(item));
    }

    public String getProjectName() {
        return this.projectNameField.getText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectNameLabel = new javax.swing.JLabel();
        projectNameField = new javax.swing.JTextField();
        solutionDirectoryLabel = new javax.swing.JLabel();
        solutionDirectoryField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        solutionNameLabel = new javax.swing.JLabel();
        solutionNameField = new javax.swing.JTextField();
        changeSolutionInstance = new javax.swing.JComboBox();
        languageLabel = new javax.swing.JLabel();
        languageSelector = new javax.swing.JComboBox<>();
        frameworkLabel = new javax.swing.JLabel();
        frameworkVersionLabel = new javax.swing.JLabel();
        optionsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputField = new javax.swing.JTextPane();
        outputLabel = new javax.swing.JLabel();
        sameDir = new javax.swing.JCheckBox();

        projectNameLabel.setLabelFor(projectNameField);
        org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, org.openide.util.NbBundle.getMessage(ConsoleAppPanelVisual.class, "ConsoleAppPanelVisual.projectNameLabel.text")); // NOI18N

        solutionDirectoryLabel.setLabelFor(solutionDirectoryField);
        org.openide.awt.Mnemonics.setLocalizedText(solutionDirectoryLabel, org.openide.util.NbBundle.getMessage(ConsoleAppPanelVisual.class, "ConsoleAppPanelVisual.solutionDirectoryLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(ConsoleAppPanelVisual.class, "ConsoleAppPanelVisual.browseButton.text")); // NOI18N
        browseButton.setActionCommand(org.openide.util.NbBundle.getMessage(ConsoleAppPanelVisual.class, "ConsoleAppPanelVisual.browseButton.actionCommand")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        solutionNameLabel.setLabelFor(solutionNameField);
        org.openide.awt.Mnemonics.setLocalizedText(solutionNameLabel, org.openide.util.NbBundle.getMessage(ConsoleAppPanelVisual.class, "ConsoleAppPanelVisual.solutionNameLabel.text")); // NOI18N

        changeSolutionInstance.setEnabled(false);

        languageLabel.setLabelFor(solutionNameField);
        org.openide.awt.Mnemonics.setLocalizedText(languageLabel, org.openide.util.NbBundle.getMessage(ConsoleAppPanelVisual.class, "ConsoleAppPanelVisual.languageLabel.text")); // NOI18N

        languageSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C#" }));
        languageSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageSelectorActionPerformed(evt);
            }
        });

        frameworkLabel.setLabelFor(solutionNameField);
        org.openide.awt.Mnemonics.setLocalizedText(frameworkLabel, org.openide.util.NbBundle.getMessage(ConsoleAppPanelVisual.class, "ConsoleAppPanelVisual.frameworkLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(frameworkVersionLabel, org.openide.util.NbBundle.getMessage(ConsoleAppPanelVisual.class, "ConsoleAppPanelVisual.frameworkVersionLabel.text")); // NOI18N
        frameworkVersionLabel.setMinimumSize(new java.awt.Dimension(0, 0));

        org.openide.awt.Mnemonics.setLocalizedText(optionsLabel, org.openide.util.NbBundle.getMessage(ConsoleAppPanelVisual.class, "ConsoleAppPanelVisual.optionsLabel.text")); // NOI18N
        optionsLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                optionsLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                optionsLabelMouseEntered(evt);
            }
        });

        outputField.setEditable(false);
        outputField.setContentType(org.openide.util.NbBundle.getMessage(ConsoleAppPanelVisual.class, "ConsoleAppPanelVisual.jTextPane1.contentType")); // NOI18N
        jScrollPane1.setViewportView(outputField);

        org.openide.awt.Mnemonics.setLocalizedText(outputLabel, org.openide.util.NbBundle.getMessage(ConsoleAppPanelVisual.class, "ConsoleAppPanelVisual.outputLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(sameDir, org.openide.util.NbBundle.getMessage(ConsoleAppPanelVisual.class, "ConsoleAppPanelVisual.sameDir.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectNameLabel)
                            .addComponent(solutionDirectoryLabel)
                            .addComponent(solutionNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(solutionDirectoryField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                                    .addComponent(changeSolutionInstance, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(browseButton)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(optionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(projectNameField)
                            .addComponent(solutionNameField)))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outputLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(languageLabel)
                                    .addComponent(frameworkLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(languageSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(frameworkVersionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sameDir)
                        .addGap(90, 90, 90)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(solutionNameLabel)
                    .addComponent(solutionNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNameLabel)
                    .addComponent(projectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(solutionDirectoryLabel)
                    .addComponent(solutionDirectoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeSolutionInstance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(optionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sameDir)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(languageSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(languageLabel))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(frameworkLabel)
                    .addComponent(frameworkVersionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        String command = evt.getActionCommand();
        if ("BROWSE".equals(command)) {
            JFileChooser chooser = new JFileChooser();
            FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
            chooser.setDialogTitle("Select Project Location");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            String path = this.solutionDirectoryField.getText();

            if (path.length() > 0) {
                File f = new File(path);
                if (f.exists()) {
                    chooser.setSelectedFile(f);
                }
            }

            if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
                File projectDir = chooser.getSelectedFile();
                solutionDirectoryField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
            }

            this.panel.fireChangeEvent();
        }

    }//GEN-LAST:event_browseButtonActionPerformed

    private void languageSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageSelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_languageSelectorActionPerformed

    private void optionsLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_optionsLabelMouseClicked
        OptionsDisplayer.getDefault().open(DotnetCliOptionsPanelController.OPTIONS_PATH);
    }//GEN-LAST:event_optionsLabelMouseClicked

    private void optionsLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_optionsLabelMouseEntered
        evt.getComponent().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_optionsLabelMouseEntered

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JComboBox changeSolutionInstance;
    private javax.swing.JLabel frameworkLabel;
    private javax.swing.JLabel frameworkVersionLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel languageLabel;
    private javax.swing.JComboBox<String> languageSelector;
    private javax.swing.JLabel optionsLabel;
    private javax.swing.JTextPane outputField;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JTextField projectNameField;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JCheckBox sameDir;
    private javax.swing.JTextField solutionDirectoryField;
    private javax.swing.JLabel solutionDirectoryLabel;
    private javax.swing.JTextField solutionNameField;
    private javax.swing.JLabel solutionNameLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        projectNameField.requestFocus();
    }

    boolean valid(WizardDescriptor wizardDescriptor) {
        // HINT: Validate, whether the .NET Core CLI was selected inside of the options or not.
        ValidationResult result = new DotnetCliOptionsValidator()
                .validateDotnetCli()
                .getResult();

        if (result.hasErrors()) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, result.getFirstErrorMessage());

            return false;
        }

        if (result.hasWarnings()) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, result.getFirstWarningMessage());

            return false;
        }

        if (projectNameField.getText().length() == 0) {
            // TODO if using org.openide.dialogs >= 7.8, can use WizardDescriptor.PROP_ERROR_MESSAGE:
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    "Project Name is not a valid folder name.");

            return false; // Display name not specified
        }

        File f = FileUtil.normalizeFile(new File(solutionDirectoryField.getText()).getAbsoluteFile());
        if (!f.isDirectory()) {
            String message = "Solution Directory is not a valid path.";
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, message);

            return false;
        }

        final File destFolder = FileUtil.normalizeFile(new File(f.getAbsolutePath() + File.separatorChar + solutionNameField.getText()).getAbsoluteFile());

        File projLoc = destFolder;
        while (projLoc != null && !projLoc.exists()) {
            projLoc = projLoc.getParentFile();
        }

        if (projLoc == null || !projLoc.canWrite()) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    "Project Folder cannot be created.");

            return false;
        }

        if (FileUtil.toFileObject(projLoc) == null) {
            String message = "Project Folder is not a valid path.";
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, message);

            return false;
        }

        File[] kids = destFolder.listFiles();

        if (changeSolutionInstance.getSelectedIndex() == 0
                && (destFolder.exists() && kids != null && kids.length > 0)) {
            // Solution Folder exists and is not empty
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    "Solution Folder already exists and is not empty.");

            return false;
        } else {
            if (destFolder.exists() && kids != null && kids.length > 0) {
                for (File project : kids) {
                    if (project.getName().equals(projectNameField.getText())) {
                        // Project Folder exists and is not empty
                        wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                                "Project Folder already exists and is not empty.");

                        return false;
                    }
                }
            }
        }

        wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "");

        return true;
    }

    void store(WizardDescriptor d) {
        String solutionName = solutionNameField.getText().trim();
        String projectName = projectNameField.getText().trim();
        String solutionDirectory = solutionDirectoryField.getText().trim();

        d.putProperty("solutionName", solutionName);
        d.putProperty("projectName", projectName);
        d.putProperty("solutionDir", solutionDirectory);
        d.putProperty("newSln", changeSolutionInstance.getSelectedIndex());
    }

    void read(WizardDescriptor settings) {
        File projectLocation = (File) settings.getProperty("projdir");
        if (projectLocation == null || projectLocation.getParentFile() == null || !projectLocation.getParentFile().isDirectory()) {
            projectLocation = ProjectChooser.getProjectsFolder();
        } else {
            projectLocation = projectLocation.getParentFile();
        }

        this.solutionDirectoryField.setText(projectLocation.getAbsolutePath());

        String projectName = (String) settings.getProperty("name");
        if (projectName == null) {
            projectName = "ConsoleApp";
        }

        this.solutionNameField.setText(projectName);
        this.projectNameField.setText(projectName);
        this.projectNameField.selectAll();
    }

    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }

    // Implementation of DocumentListener --------------------------------------
    @Override
    public void changedUpdate(DocumentEvent e) {
        updateTexts(e);

        if (this.solutionNameField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_SOLUTION_NAME, null, this.solutionNameField.getText());
        }

        if (this.projectNameField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameField.getText());
        }
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        updateTexts(e);

        if (this.projectNameField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_SOLUTION_NAME, null, this.projectNameField.getText());
        }

        if (this.projectNameField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameField.getText());
        }
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        updateTexts(e);

        if (this.projectNameField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_SOLUTION_NAME, null, this.projectNameField.getText());
        }

        if (this.projectNameField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameField.getText());
        }
    }

    public void addChangeListener(ChangeListener listener) {
        if (listenerCount.getAndIncrement() == 0) {
            DotnetCliOptions.getInstance().addPreferenceChangeListener(this);
        }

        changeSupport.addChangeListener(listener);
    }

    public void removeChangeListener(ChangeListener listener) {
        if (listenerCount.decrementAndGet() == 0) {
            DotnetCliOptions.getInstance().removePreferenceChangeListener(this);
        }

        changeSupport.removeChangeListener(listener);
    }

    public void fireChange() {
        changeSupport.fireChange();
    }

    /**
     * Handles changes in the Project name and project directory,
     */
    private void updateTexts(DocumentEvent e) {
        Document doc = e.getDocument();

//        if (doc == projectNameField.getDocument() || doc == solutionDirectoryField.getDocument() || doc == solutionNameField.getDocument()) {
        // Change in the project name
        String solutionName = solutionNameField.getText();
        String projectName = projectNameField.getText();
        String solutionDirectory = solutionDirectoryField.getText();

        if (solutionNameField.isEnabled()) {
//                projectNameField.setText(solutionName);
//                solutionNameField.setText(projectFolder + File.separatorChar + projectName);
            if (sameDir.isSelected()) {
                outputField.setText(solutionDirectory + File.separatorChar + solutionName + File.separatorChar + solutionName + ".sln\n"
                        + solutionDirectory + File.separatorChar + solutionName + File.separatorChar + projectName + ".csproj\n"
                        + solutionDirectory + File.separatorChar + solutionName + File.separatorChar + "{project files}");
            } else {
                outputField.setText(solutionDirectory + File.separatorChar + solutionName + File.separatorChar + solutionName + ".sln\n"
                        + solutionDirectory + File.separatorChar + solutionName + File.separatorChar + projectName + File.separatorChar + projectName + ".csproj\n"
                        + solutionDirectory + File.separatorChar + solutionName + File.separatorChar + projectName + File.separatorChar + "{project files}");
            }
//                outputField.add(new JLabel());
//                solutionNameField.setText(projectFolder + File.separatorChar + projectName);
        }
//        }

        panel.isValid();
        panel.fireChangeEvent(); // Notify that the panel changed
    }

    @Override
    public void preferenceChange(PreferenceChangeEvent evt) {
        fireChange();
    }
}
